{"version":3,"sources":["components/AddCategory.js","helpers/getGifts.js","components/GridGiftItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GiftExprestApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","prototype","Proptypes","func","isRequired","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GridGiftItem","className","src","alt","GiftGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GiftExprestApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB9C,OAEE,sBAAMC,SAXgB,SAACC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAe,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACtCN,EAAc,MAMtB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBa,SAACP,GAClBF,EAAcE,EAAEQ,OAAOF,aA6B/BZ,EAAYe,UAAY,CACpBX,c,OAAeY,EAAUC,KAAKC,Y,mCCrCrBC,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBC,EADgB,gDAC8BC,UAAUH,GADxC,+DAGHI,MAAMF,GAHH,cAGhBG,EAHgB,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVhB,kBAcfM,GAde,4CAAH,sDCCRO,EAAe,SAAC,GAAiB,IAAhBb,EAAe,EAAfA,IAAIU,EAAW,EAAXA,MAE9B,OACI,sBAAKI,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAIA,QCFHO,EAAW,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFd,SAAEA,GAAe,IAAD,EAChBlB,mBAAS,CACjCyB,KAAM,GACNa,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAiB1C,OAXAC,qBAAU,WACRxB,EAAUC,GACLwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAKkB,EACLL,SAAU,SAGrB,CAACpB,IAGGqB,EDbuBK,CAAa1B,GAAjCa,EAF8B,EAEnCN,KAAaa,EAFsB,EAEtBA,QAGlB,OACE,qCACE,oBAAIJ,UAAU,qCAAd,SAAoDhB,IAEnDoB,GAAU,mBAAGJ,UAAU,mCAAb,qBAEX,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aEMlBgB,EApBQ,WAAO,IAAD,EACS7C,mBAAS,CAAC,KADnB,mBACpB8C,EADoB,KACR/C,EADQ,KAG3B,OACE,qCACE,0CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEM+C,EAAWnB,KAAI,SAACT,GAAD,OACf,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,YCJZ6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.2da7cfd3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Proptypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setcategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handlerInput = (e)=>{\r\n        setInputValue(e.target.value);      \r\n    }\r\n     \r\n    const handlerSubmit = (e) =>{\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length>2){\r\n            setcategories( cate =>[inputValue, ...cate ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n  return (\r\n    \r\n    <form onSubmit = { handlerSubmit }>\r\n        \r\n        <input \r\n            type=\"text\" \r\n            value={inputValue} \r\n            onChange={ handlerInput}>\r\n\r\n        </input>\r\n    </form>\r\n    \r\n    \r\n  );\r\n};\r\n\r\n\r\nAddCategory.prototype = {\r\n    setInputValue: Proptypes.func.isRequired\r\n}"," \r\nexport const getGifts = async (category) => {\r\n  const url =`http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=u4FurHiQgGPSHvGo9a6g8HJuje8ZQ4bo&limit=10`;\r\n \r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};","import React from 'react'\r\n\r\nexport const GridGiftItem = ({url,title}) => {\r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title }></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GridGiftItem } from \"./GridGiftItem\";\r\n\r\n\r\nexport const GiftGrid = ({ category }) => {\r\n\r\nconst {data:images, loading}  = useFetchGifs(category);\r\n\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__bounceS\">{category}</h3>\r\n    \r\n      {loading &&<p className=\"animate__animated animate__flash\">Loading</p>}\r\n      \r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GridGiftItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifts } from \"../helpers/getGifts\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifts( category )\r\n        .then( imgs =>{\r\n            setstate({\r\n                data:imgs,\r\n                loading : false\r\n            });\r\n        } )\r\n  }, [category]);\r\n\r\n  \r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GiftGrid } from \"./components/GiftGrid\";\r\n\r\nconst GiftExprestApp = () => {\r\n  const [categories, setcategories] = useState([\"\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2> GitfApp</h2>\r\n      <AddCategory setcategories={setcategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {\r\n            categories.map((category) => (\r\n            <GiftGrid key={category} category={category}/>\r\n            ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GiftExprestApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './GiftExprestApp';\nimport './index.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}